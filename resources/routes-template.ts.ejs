<% const handledEntities = Object.values(entityMap).filter(utils.isPresentableEntity).filter((e) => e.api.methods); -%>
<% if (handledEntities.length > 0) { -%>
import { Router } from 'express';
import { execute } from '@airent/api-express';
  <%_ handledEntities.forEach((entity) => { -%>
import <%= entity.api.strings.handlersClass %> from '<%- entity.api.strings.airentApiHandlerPackage %>';
  <%_ }); -%>

const router = Router();
  <%_ handledEntities.forEach((entity) => { -%>

    <%_ if (entity.api.booleans.hasGetMany) { -%>
router.post('/get-many-<%= utils.toKababCase(utils.pluralize(entity.name)) %>', execute(<%= entity.api.strings.handlersClass %>.getMany));
    <%_ } -%>
    <%_ if (entity.api.booleans.hasGetOne) { -%>
router.post('/get-one-<%= utils.toKababCase(entity.name) %>', execute(<%= entity.api.strings.handlersClass %>.getOne));
    <%_ } -%>
    <%_ if (entity.api.booleans.hasGetOneSafe) { -%>
router.post('/get-one-<%= utils.toKababCase(entity.name) %>-safe', execute(<%= entity.api.strings.handlersClass %>.getOneSafe));
    <%_ } -%>
    <%_ if (entity.api.booleans.hasCreateOne) { -%>
router.post('/create-one-<%= utils.toKababCase(entity.name) %>', execute(<%= entity.api.strings.handlersClass %>.createOne));
    <%_ } -%>
    <%_ if (entity.api.booleans.hasUpdateOne) { -%>
router.post('/update-one-<%= utils.toKababCase(entity.name) %>', execute(<%= entity.api.strings.handlersClass %>.updateOne));
    <%_ } -%>
    <%_ if (entity.api.booleans.hasDeleteOne) { -%>
router.post('/delete-one-<%= utils.toKababCase(entity.name) %>', execute(<%= entity.api.strings.handlersClass %>.deleteOne));
    <%_ } -%>
  <%_ }); -%>

export default router;
<% } -%>
